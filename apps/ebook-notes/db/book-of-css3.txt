File Name	Name	Type	Page	Modification Date	Comment
The Book of CSS3.pdf	brad	Highlight	24	4/5/2014 6:09:44 PM 	"CSS3 has two modules devoted exclusively to paged media,\rsuch as PDF or printed materials, and also supports braille, handheld mobile\rdevices (i.e., cellphones rather than smartphones), teletypes, and televisions."
The Book of CSS3.pdf	brad	Highlight	24	4/5/2014 6:10:39 PM 	and wonder why I don’t refer to the\rGecko layout engine used by Firefox or to any WebKit-based browser by name.
The Book of CSS3.pdf	brad	Highlight	24	4/5/2014 6:10:31 PM 	"whereas WebKit is a type of layout engine,"
The Book of CSS3.pdf	brad	Highlight	24	4/5/2014 6:11:11 PM 	"The reason is quite simple: Firefox is clearly the preeminent Gecko-based\rbrowser, whereas Chrome and Safari dispute the eminence of WebKit between\rthem. As a simple space-saving exercise, I will say “WebKit” rather than “Chrome\rand Safari.” The exception to this rule is when a specific feature or syntax only\rappears in one type of WebKit browser—such as hardware-accelerated 3D\rtransformations in Safari—in which case, I refer to the name of the browser\rin question."
The Book of CSS3.pdf	brad	Highlight	28	4/5/2014 6:13:48 PM 	CSS3 Is Modular
The Book of CSS3.pdf	brad	Highlight	28	4/5/2014 6:13:56 PM 	"This is why, instead of a single, monolithic CSS3 specification document,\ryou have CSS3 Basic User Interface Module, Selectors Level 3, Media Queries,"
The Book of CSS3.pdf	brad	Highlight	29	4/5/2014 6:14:08 PM 	"and so on. Some of these modules are revisions of CSS2.1, and some are\rnewly created, but all fall under the banner of CSS3."
The Book of CSS3.pdf	brad	Highlight	29	4/5/2014 6:14:30 PM 	"As I move through this book and discuss each of the different modules, I’ll\ralso refer to that module’s status."
The Book of CSS3.pdf	brad	Highlight	30	4/5/2014 6:16:12 PM 	"What the media refers to as HTML5 is really that new revision of the\rmarkup language combined with CSS3, SVG, and JavaScript—what many\rpeople (myself included) prefer to call part of the Web Stack (or, Open Web Stack)."
The Book of CSS3.pdf	brad	Highlight	30	4/5/2014 6:16:47 PM 	"The property is box-sizing, which allows you to set how an element’s\rdimensions are calculated. As you know, an element’s total width—without\rincluding its margin—is usually calculated from its stated (or inherited)\rwidth value, plus its left and right padding, plus its border-width. Let’s take as\ran example the following code, which should be very familiar to you."
The Book of CSS3.pdf	brad	Highlight	31	4/5/2014 6:17:52 PM 	"Now the width has become a lot harder to calculate because you first need\rto know the width value of the parent element before you can know how much\r15 percent of that is and add the pixel values. Calculations can become very\rcomplicated very quickly, making percentage-based layouts tricky to manage\rproperly.\rAt this point, the box-sizing property comes in handy. With this, you can\rset from which part of the box model—the content itself or the border—the\rwidth of the element is calculated."
The Book of CSS3.pdf	brad	Highlight	31	4/5/2014 6:18:51 PM 	"This property is implemented\rin all major browsers but with browser-specific prefixes in some: In Firefox,\rthe property uses the -moz- prefix—that is, the property is -moz-box-sizing;\rand in WebKit, it has the -webkit- prefix, so it would be -webkit-box-sizing."
The Book of CSS3.pdf	brad	Highlight	31	4/5/2014 6:18:34 PM 	"The value of the declaration is the word keyword, but again the value is\ronly an indicator; it represents a range of possible values. For box-sizing the\rpermitted values are border-box and content-box."
The Book of CSS3.pdf	brad	Highlight	33	4/5/2014 7:31:36 PM 	Browser-Specific Prefixes
The Book of CSS3.pdf	brad	Highlight	33	4/5/2014 7:31:50 PM 	"When a module is still under active review, as much of CSS3 is, a lot is\rsubject to change; the syntax of a property may be revised, or properties may\rbe dropped entirely."
The Book of CSS3.pdf	brad	Highlight	33	4/5/2014 7:31:31 PM 	"To prevent this from happening, each of the\rdifferent browser engines prefixes a short code to the beginning of experimental\rproperties."
The Book of CSS3.pdf	brad	Highlight	36	4/5/2014 7:38:49 PM 	"Media Queries extend the media types by providing\ra query syntax that lets you serve styles far more specifically to your user’s\rdevice, allowing a tailored experience."
The Book of CSS3.pdf	brad	Highlight	36	4/5/2014 7:39:02 PM 	"The module is already well implemented\rin Firefox, WebKit, and Opera, and will be in Internet Explorer from\rversion 9."
The Book of CSS3.pdf	brad	Highlight	36	4/5/2014 7:39:43 PM 	"Media Queries address many of these issues. For a start, they detect\rdevices based on their attributes, so no browser-sniffing scripts are required."
The Book of CSS3.pdf	brad	Highlight	36	4/5/2014 7:39:54 PM 	"They allow you to target stylesheets directly for a device’s capabilities, so if a\rdevice with a small screen is detected, CSS rules will be tailored to that screen\rsize, removing extraneous elements from the screen, serving smaller images,\rand making text clearer."
The Book of CSS3.pdf	brad	Highlight	37	4/5/2014 7:42:42 PM 	"Ethan Marcotte’s article, “Responsive\rWeb Design” (http://www.alistapart.com/articles/responsive-web-design/),"
The Book of CSS3.pdf	brad	Highlight	37	4/5/2014 7:42:34 PM 	"online at http://www.mediaqueri.es/, which"
The Book of CSS3.pdf	brad	Highlight	41	4/5/2014 7:59:00 PM 	"The device-width Media Feature functions in a similar way, but it describes\rthe width of the device that is rendering the page. When dealing with web\rpages, the device width is the width of the screen that’s displaying the page\rrather than the width of the browser window. As with width and height, the\rbasic syntax requires a length value and can be prefixed in the same way:"
The Book of CSS3.pdf	brad	Highlight	41	4/5/2014 7:59:05 PM 	@media media and (device-width:1024px) { rules }\r@media media and (max-device-width:320px) { rules }\r@media media and (min-device-width:800px) { rules }
The Book of CSS3.pdf	brad	Highlight	41	4/5/2014 7:59:13 PM 	"device-width becomes most useful when designing for mobile devices,\rwhich have smaller display areas. Using this feature, you can cater your designs\rto those smaller devices without having to create a whole new version of the\rsite designed for the mobile web."
The Book of CSS3.pdf	brad	Highlight	42	4/5/2014 8:00:44 PM 	"iOS (iPhone, iPad, etc.) and Android devices measure device-width by the shorter\rpair of the four screen sides; that is, given a device with dimensions of 320×480, the\rdevice-width will be 320px, regardless of whether you're viewing it in portrait or landscape\rmode."
The Book of CSS3.pdf	brad	Highlight	43	4/5/2014 8:01:51 PM 	A better way to create your pages is to make a basic stylesheet for your\rmobile audience first and then one with larger assets for desktop or tablet\rusers that is loaded using a Media Query such as device-width:
The Book of CSS3.pdf	brad	Highlight	43	4/5/2014 8:02:50 PM 	"When the stylesheets are separated in this way, the file desktop.css won’t\rbe loaded for devices with a screen width of less than 480px, so none of those\rlarge assets will be downloaded in the background.\rThis will work for the great majority of browsers from the past few years;\rany really old browsers will get the basic stylesheet instead, which is probably\rbetter for them as they won’t be able to cope with the advanced features I’ll\rbe teaching throughout the rest of this book.\rThe big exception to this is Internet Explorer (get used to that sentence;\ryou’ll be reading it a lot). While IE9 does have Media Query support, previous\rversions don’t. To get around that you just need to load the desktop file\rusing a conditional comment that only Internet Explorer recognizes:"
The Book of CSS3.pdf	brad	Highlight	43	4/5/2014 8:03:36 PM 	"Orientation\rIf you’re less concerned with the actual dimensions of the viewing device but\rwant to optimize your pages for either horizontal (like a typical web browser)\ror vertical (like an ebook reader) viewing, the Media Feature you need is\rorientation. Here is its syntax:"
The Book of CSS3.pdf	brad	Highlight	43	4/5/2014 8:03:44 PM 	@media media and (orientation:value) { rules }
The Book of CSS3.pdf	brad	Highlight	43	4/5/2014 8:04:03 PM 	value can be one of two options: landscape or portrait.
The Book of CSS3.pdf	brad	Highlight	44	4/5/2014 8:04:38 PM 	"For example, you can use orientation to display a navigation menu horizontally\ror vertically, depending on the visitor’s browser orientation. The\rcode looks like this:"
The Book of CSS3.pdf	brad	Highlight	44	4/5/2014 8:04:47 PM 	ul { overflow: hidden; }\rli { float: left; }\r@media only screen and (orientation: portrait) {\rli { float: none; }\r}
The Book of CSS3.pdf	brad	Highlight	44	4/5/2014 8:05:39 PM 	Aspect Ratio\rYou can also create queries that apply when a certain width-to-height ratio is\rmet. Use aspect-ratio to test the browser’s aspect ratio or device-aspect-ratio\rto test the device’s aspect ratio. Here is the syntax for these two features:\r@media media and (aspect-ratio:horizontal/vertical) { rules }\r@media media and (device-aspect-ratio:horizontal/vertical) { rules }
The Book of CSS3.pdf	brad	Highlight	45	4/5/2014 8:06:52 PM 	"Pixel Ratio\rIn general, the CSS Pixel unit (px) is a measurement of a single pixel on the\rcomputer screen—if your screen is 1024×768 resolution and you give an element\ra width of 1024px, you expect it to fill the screen horizontally. This is not\ralways the case with smartphone and mobile devices, however. Reading websites\ron their small screens often involves zooming in, and this magnification\rcauses a screen pixel to be larger than a CSS pixel. For example, magnifying\ra page by 100 percent means 1 CSS pixel is displayed on the screen by 4 device\rpixels (2×2)."
The Book of CSS3.pdf	brad	Highlight	49	4/5/2014 8:09:59 PM 	"Selectors are the heart of CSS, and although\rthe original CSS1 specification had only 5\ror 6, CSS2 expanded the range with 12 more.\rCSS3 goes further still, roughly doubling the\rnumber of available selectors.\rSelectors can be broadly separated into two categories. The first are those\rthat act directly on elements defined in the document tree (p elements and\rhref attributes, for example); this category contains class, type, and attribute\rselectors. For the sake of expediency, I’ll group these together under the\rbanner of DOM selectors. The second category contains pseudo-selectors that\ract on elements or information that sits outside of the document tree (such\ras the first letter of a paragraph or the last child of a parent element). I’ll\rcover pseudo-selectors in the next chapter—here I’ll discuss DOM selectors."
The Book of CSS3.pdf	brad	Highlight	50	4/5/2014 8:26:04 PM 	"Attribute Selectors\rAttribute selectors were introduced in CSS2, and, as you may expect from\rthe name, they allow you to specify rules that match elements based on their\rattributes—such as href or title—and the values of those attributes. The four\rselectors defined in CSS2 are:\rE[attr] {} /* Simple Attribute Selector */\rE[attr='value'] {} /* Exact Attribute Value Selector */\rE[attr~='value'] {} /* Partial Attribute Value Selector */\rE[attr|='value'] {} /* Language Attribute Selector */"
The Book of CSS3.pdf	brad	Highlight	50	4/5/2014 8:26:49 PM 	"Before moving on to the new selectors in CSS3, a quick recap of how\reach selector is utilized is worthwhile. For this, I’ll use the following markup,\rwhich is a (very short) contact list:"
The Book of CSS3.pdf	brad	Highlight	51	4/5/2014 8:27:41 PM 	"New Attribute Selectors in CSS3\rYou’ve seen how useful attribute selectors can be for finding exact or partial\rvalues in selectors, but what if you want even more flexibility? CSS3’s new\rselectors provide it with the power to match substrings within an attribute\rvalue. This feature makes them especially useful for applying rules to XML\rdocuments, which have more arbitrary attributes than HTML—though they\rare still quite useful for HTML developers as well."
The Book of CSS3.pdf	brad	Highlight	51	4/5/2014 8:28:46 PM 	Beginning Substring Attribute Value Selector
The Book of CSS3.pdf	brad	Highlight	52	4/5/2014 8:30:15 PM 	The Beginning Selector is especially useful when you want to add visual\rinformation to hyperlinks. Here’s an example of a typical hyperlink to an\rexternal website:
The Book of CSS3.pdf	brad	Highlight	52	4/5/2014 8:30:51 PM 	"Of course, you can extend this to cover many other web protocols, some\rof which are used in this example:\ra[href^='mailto'] { background-image: url('email_go.png'); }\ra[href^='ftp'] { background-image: url('folder_go.png'); }\ra[href^='https'] { background-image: url('lock_go.png'); }"
The Book of CSS3.pdf	brad	Highlight	53	4/5/2014 8:31:48 PM 	"Ending Substring Attribute Value Selector\rThe Ending Selector, as I’ll call it, works exactly like the Beginning Selector—\rjust the other way around! That is, you use it to select attributes that end with\rthe supplied value."
The Book of CSS3.pdf	brad	Highlight	53	4/5/2014 8:31:55 PM 	value. The syntax differs by just one character: This time you\ruse the dollar character ($) to modify the equal sign (=).
The Book of CSS3.pdf	brad	Highlight	54	4/5/2014 8:32:18 PM 	"Arbitrary Substring Attribute Value Selector\rThe final new attribute selector—which I’ll call the Arbitrary Selector—works\rin the same way as the previous two, but it searches for the provided substring\rvalue anywhere inside the specified attribute string. This selector uses\rthe asterisk (*) character. Here’s the new syntax:"
The Book of CSS3.pdf	brad	Highlight	55	4/5/2014 8:32:51 PM 	"And the rules are still applied. The Partial Attribute Value Selector requires\rthat the user enter a value that matches a full item in a space-separated list—\rin the example that would be either free, image, or library—so the im value\rwould not be found anywhere in the markup in CSS2."
The Book of CSS3.pdf	brad	Highlight	55	4/5/2014 8:33:36 PM 	This selector is the most flexible of the three new attribute selectors as it\rtakes a more wildcard approach to searching within strings. But the extra flexibility\rmeans you must take more care when defining the values provided to\rthe selector; simple combinations of letters are far more likely to occur when\ryou can match anywhere within a string.
The Book of CSS3.pdf	brad	Highlight	56	4/5/2014 8:34:19 PM 	"The General Sibling Combinator\rOur final new DOM selector in CSS3 is a combinator, which you’ll recall\rmeans that it joins together more than one selector."
The Book of CSS3.pdf	brad	Highlight	56	4/5/2014 8:34:29 PM 	"The General Sibling\rCombinator is an extension of the Adjacent Sibling Combinator, which was\rintroduced in CSS2. The syntaxes differ by just a single character:"
The Book of CSS3.pdf	brad	Highlight	59	4/5/2014 8:36:30 PM 	"The very first CSS specification, CSS1,\rintroduced the concepts of pseudo-classes and\rpseudo-elements. These are selectors that act\rupon information about elements that extends\r(or sits outside of) the document tree, such as the state\rof a link or the first letter of a text node. A pseudo-class\rdifferentiates among an element’s different states or types; these include—\rbut are not limited to—those that provide information about link states:\r:hover, :visited, :active, and so on. A pseudo-element provides access to an\relement’s subpart, which includes those pseudo-elements that select portions\rof text nodes, for instance, :first-line and :first-letter."
The Book of CSS3.pdf	brad	Highlight	59	4/5/2014 8:36:46 PM 	"CSS3 builds on these foundations\rwith an expanded range of pseudo-classes, as well as a (slightly) tweaked\rsyntax to differentiate pseudo-elements."
The Book of CSS3.pdf	brad	Highlight	61	4/5/2014 8:41:25 PM 	"E:first-child {}\rThis pseudo-class allows you to make a selection based on information\rthat exists but isn’t provided as an attribute of the element—the exact purpose\rof a pseudo-class. Since :first-child was introduced in CSS2, it has been\rthe only pseudo-class of its type. But CSS3 extends the range greatly with the\rintroduction of 11 new structural pseudo-classes."
The Book of CSS3.pdf	brad	Highlight	61	4/5/2014 8:41:55 PM 	"The nth-* Pseudo-classes\rFour of the new pseudo-classes are based on a count value used to find an\relement’s position in the document tree; for this count, you use the syntax\rnth-*. Note that I’ve used the asterisk here in place of a number of different\rvalues, each of which I’ll introduce throughout the rest of this chapter.\rThe basic syntax of the nth-* pseudo-classes is quite straightforward. By\rdefault, n represents a number that begins at 0 and increments by 1 (1, 2, 3,\retc.). Another integer can be passed into it as a multiplier. For example, 2n\ris every multiple of 2 (2, 4, 6, etc.), 3n is every multiple of 3 (3, 6, 9, etc.), and\rso on:\rE:nth-*(n) {}\rE:nth-*(2n) {}\rE:nth-*(3n) {}"
The Book of CSS3.pdf	brad	Highlight	68	4/5/2014 8:43:56 PM 	"Other Pseudo-classes\rIn addition to the structural pseudo-classes discussed so far in this chapter,\rCSS3 introduces a number of pseudo-classes that allow you to select elements\rbased on other criteria. These include link destinations, user interface elements,\rand even an inverse selector that permits selection based on what an\relement isn’t!"
The Book of CSS3.pdf	brad	Highlight	72	4/5/2014 8:46:25 PM 	"I haven’t given a demonstration of the checked state here, as most browsers\rhave very different interpretations of which style rules can be applied to\rcheckbox inputs. For a comprehensive overview of cross-browser styling of form\relements, I highly recommend “Styling Form Controls with CSS” from the blog\r456 Berea Street (http://www.456bereastreet.com/lab/styling-form-controls-revisited/ )."
The Book of CSS3.pdf	brad	Highlight	76	4/7/2014 4:31:42 PM 	"Next is the src property (􀁙), which tells the browser the location of the\rfont file. This property accepts a few different values: local (􀁚) uses the\rname of the source font to check if the font is already installed on the user’s\rmachine, url (􀁛) provides a path to the font if it’s not available locally, and\rformat (􀁜) specifies the font type. In this example, I’ve used OpenType, but\rmore types are available, and I’ll discuss those later in “Font Formats” on\rpage 55.\rI can supply many different values for the src property by separating the\rvalues with commas, as I’ve done in the code example. This utilizes the power\rof the cascade to allow different fall-back values, which will come in handy in\ra later example."
The Book of CSS3.pdf	brad	Highlight	80	4/7/2014 4:35:28 PM 	These issues mean you need a workaround to ensure that @font-face\rworks correctly across all browsers.
The Book of CSS3.pdf	brad	Highlight	82	4/7/2014 4:36:49 PM 	"@font-face {\rfont-family: 'GentiumBookBasicRegular';\rsrc: url('GenBkBasR.eot');\rsrc: local('☺'),\rurl('GenBkBasR.woff') format('woff'),\rurl('GenBkBasR.ttf') format('truetype'),\rurl('GenBkBasR.svg#GentiumBookBasic') format('svg');\r}"
The Book of CSS3.pdf	brad	Highlight	91	4/5/2014 8:49:57 PM 	"Text content has been the backbone of the\rWeb since its creation, yet for years we’ve\rhad to make do with a very limited set of\rtools. CSS3 hugely expands its typographic\rtoolset by introducing a range of new and updated\rfeatures in the Text Module.\rChief among these features is the ability to add shadows to text."
The Book of CSS3.pdf	brad	Highlight	91	4/5/2014 8:50:15 PM 	"A similar feature is text-outlining\r(or text-stroking), which, although not widely implemented, does increase\rthe variety of options available when creating decorative headlines."
The Book of CSS3.pdf	brad	Highlight	91	4/7/2014 4:38:49 PM 	"The CSS Text Level 3 Module (http://www.w3.org/TR/css3-text/) hadn’t\rbeen updated since 2007 (although a new version was released during the\rwriting of this book) and was incomplete in some places. However, some\relements of it are quite well implemented and ready for you to begin using\rstraightaway."
The Book of CSS3.pdf	brad	Highlight	92	4/7/2014 4:38:36 PM 	"Understanding Axes and Coordinates\rOne syntax concept that’s new to CSS3 is that of the axis (or axes when you\rhave more than one). You may know all about axes if you remember your\rmath lessons, but if you’re reading this section, I’ll assume you need a refresher.\rCSS uses the Cartesian coordinate system, which consists of two lines, one\rhorizontal and one vertical, that cross each other at a right angle. Each of\rthese lines is an axis: The horizontal line is known as the x-axis, and the vertical\rline is known as the y-axis. The point where the two lines meet is called the\rorigin. You can see this illustrated in Figure 6-1."
The Book of CSS3.pdf	brad	Highlight	93	4/7/2014 4:39:47 PM 	"In CSS, all elements have a height and a width, each of which is a stated\rnumber of pixels in length (even when using other length units such as em or\ra percentage). The height and width together creates a pixel grid; for example,\ran element that is 10px by 10px in size has a pixel grid of 100px. If you consider\rthat the origin of the element is at the top-left corner, then the two\rpositional values for properties like background-position correspond exactly to\rthe x and y coordinates."
The Book of CSS3.pdf	brad	Highlight	96	4/7/2014 4:55:03 PM 	"Multiple Shadows\rYou don’t have to limit yourself to a single shadow—text-shadow’s syntax\rsupports adding multiple shadows to a text node. Just supply extra values to\rthe property, using commas to separate them, like so:"
The Book of CSS3.pdf	brad	Highlight	102	4/7/2014 6:49:48 PM 	"Wrapping Text\rAn issue that’s frequently encountered when working with dynamic text is\rline wrapping in inappropriate places. For example, if providing details about\ran event you would want the start time and end time to appear next to each\rother on the same line, but with a dynamic line break, the end time may be\rpushed to the subsequent line. The Text Module aims to provide more control\rover these kinds of issues with a pair of properties that lets you define more\rclearly how you want your content to wrap.\rword-wrap\rThe first property is word-wrap, which specifies whether the browser can break\rlong words to make them fit into the parent element. The syntax for it is very\rsimple:"
The Book of CSS3.pdf	brad	Highlight	112	5/9/2014 9:38:15 PM 	"One caveat to using multiple columns is that Firefox and WebKit use slightly\rdifferent algorithms for calculating columns. As a result, text may be distributed\rdifferently among columns in each browser. Firefox’s approach is to\rmake the majority of columns have the same number of lines, with the final\rcolumn longer or shorter than the rest. In contrast, WebKit will make all of\rthe columns as equal as possible."
The Book of CSS3.pdf	brad	Highlight	112	5/9/2014 9:38:05 PM 	"One caveat to using multiple columns is that Firefox and WebKit use slightly\rdifferent algorithms for calculating columns. As a result, text may be distributed\rdifferently among columns in each browser."
The Book of CSS3.pdf	brad	Highlight	113	5/9/2014 9:39:07 PM 	"The keyword values are auto, which fills columns sequentially, as Firefox\rdoes, and balance, which distributes in the same way as WebKit does. The\rdefault is balance, so we can say that the WebKit approach is correct in this\rcase. However, neither of the browsers actually implements this property yet,\rso until they do you’ll just have to be aware of the different approaches when\rworking with columns."
The Book of CSS3.pdf	brad	Highlight	114	5/9/2014 9:39:52 PM 	"When using a prescriptive multi-column layout, the browser should place\ra default 1em gap between each column. (Remember that when using\rdynamic layouts, as in Figure 7-5, 1em is the minimum width.) You can, however,\ralter that default and specify your own distances by using two new\rproperties: column-gap and column-rule."
The Book of CSS3.pdf	brad	Highlight	158	5/11/2014 8:11:32 PM 	Note that this gradient begins at the top of the box and moves vertically\rto the bottom—this is because of the point value in the syntax. The point is\rthe position the gradient starts from and is specified with a similar syntax to
The Book of CSS3.pdf	brad	Highlight	159	5/11/2014 8:12:53 PM 	"background-position; that is, either by keywords (top, bottom, left, right, center)\ror a percentage value. Point requires two arguments (left center, top right,\r0% 50%, and so on) but if only one is specified, then the other is assumed to be\rcenter (or 50%). Therefore, an argument of left is assumed to be left center,\rand an argument of 100% is assumed to be 100% 50%. If no point value is provided,\ras in the first example, the value is assumed to be top center or 0% 50%, which\ris the top of the box."
The Book of CSS3.pdf	brad	Highlight	159	5/11/2014 8:13:40 PM 	"An alternative to point is to use an angle argument. Angles can be declared\rusing a few different units: the Values and Units Module allows degrees, grads,\rradians, and turns, but I’m going to stick with degrees (deg) as they’re the\rmost commonly understood. (See http://www.w3.org/TR/css3-values/#angle/\rfor more information on the others.)"
The Book of CSS3.pdf	brad	Highlight	159	5/11/2014 8:14:45 PM 	"WebKit’s implementation is pretty similar to that of Firefox’s, although angle\rvalues are not permitted, and the syntax is somewhat more precise and verbose:"