File Name	Name	Type	Page	Modification Date	Comment
Data Structures and Algorithms.pdf	brad	Highlight	3	4/18/2014 4:50:24 AM 	JavaScript has been used more and more as a server-side computer\rprogramming language owing to platforms such as Node.js and SpiderMonkey.
Data Structures and Algorithms.pdf	brad	Highlight	3	4/18/2014 4:50:42 AM 	"Among these\rtools are classic data structures such as linked lists, stacks, queues, and graphs, as well as classic\ralgorithms for sorting and searching data."
Data Structures and Algorithms.pdf	brad	Highlight	3	4/18/2014 4:51:34 AM 	"Most experienced programmers will admit\rthat for many programming problems, once they come up with the proper data structure, the\ralgorithms needed to solve the problem are easier to design and implement."
Data Structures and Algorithms.pdf	brad	Highlight	3	4/18/2014 4:52:22 AM 	An example of a data structure that leads to efficient algorithms is the binary search tree (BST). A
Data Structures and Algorithms.pdf	brad	Highlight	3	4/18/2014 4:51:52 AM 	"A\rbinary search tree is designed so that it is easy to find the minimum and maximum values of a set\rof data, yielding an algorithm that is more efficient than the best search algorithms available."
Data Structures and Algorithms.pdf	brad	Highlight	4	4/18/2014 4:52:46 AM 	"For example, there are at least six or seven ways to sort a list of data, but knowing\rthat the Quicksort algorithm is more efficient than the selection sort algorithm will lead to a much\rmore efficient sorting process."
Data Structures and Algorithms.pdf	brad	Highlight	4	4/18/2014 4:52:59 AM 	"Or that it’s fairly easy to implement a sequential or linear search\ralgorithm for a list of data, but knowing that the binary sort algorithm can sometimes be twice as\refficient as the sequential search will lead to a better program."
Data Structures and Algorithms.pdf	brad	Highlight	11	4/18/2014 5:12:25 PM 	print(z.toFixed(2)); // displays 3.30
Data Structures and Algorithms.pdf	brad	Highlight	13	4/19/2014 12:42:16 AM 	Repetition Constructs\rMany of the algorithms we study in this book are repetitive in nature. We use two repetition\rconstructs in this book—the while loop and the for loop.
Data Structures and Algorithms.pdf	brad	Highlight	13	4/18/2014 5:01:13 AM 	"When we want to execute a set of statements while a condition is true, we use a while loop.\rExample 1-6 demonstrates how the while loop works."
Data Structures and Algorithms.pdf	brad	Highlight	13	4/18/2014 5:01:21 AM 	"When we want to execute a set of statements a specified number of times, we use a for loop.\rExample 1-7 uses a for loop to sum the integers 1 through 10."
Data Structures and Algorithms.pdf	brad	Highlight	14	4/18/2014 5:01:38 AM 	JavaScript provides the means to define both value-returning functions and functions that don’t\rreturn values (sometimes called subprocedures or void functions).
Data Structures and Algorithms.pdf	brad	Highlight	16	4/19/2014 12:45:54 AM 	"In Example 1-11, because the scope variable inside the function is not declared with the var\rkeyword, when the string ""local"" is assigned to the variable, we are actually changing the value of\rthe scope variable in the main program. You should always begin every definition of a variable\rwith the var keyword to keep things like this from happening.\rEarlier, we mentioned that JavaScript has function scope. This means that JavaScript does not\rhave block scope, unlike many other modern programming languages. With block scope, you can\rdeclare a variable within a block of code and the variable is not accessible outside of that block,\ras you typically see with a C++ or Java for loop:"
Data Structures and Algorithms.pdf	brad	Highlight	16	4/19/2014 12:44:09 AM 	"Recursion\rFunction calls can be made recursively in JavaScript. The factorial() function defined earlier can\ralso be written recursively, like this:"
Data Structures and Algorithms.pdf	brad	Highlight	16	4/19/2014 12:44:27 AM 	"When a function is called recursively, the results of the function’s computation are temporarily\rsuspended while the recursion is in progress. To demonstrate how this works, here is a diagram\rfor the factorial() function when the argument passed to the function is 5:"
Data Structures and Algorithms.pdf	brad	Highlight	17	4/19/2014 12:47:11 AM 	"Several of the algorithms discussed in this book use recursion. For the most part, JavaScript is\rcapable of handling fairly deep recursive calls (this is an example of a relatively shallow\rrecursive call); but in one or two situations, an algorithm requires a deeper recursive call than\rJavaScript can handle and we instead pursue an iterative solution to the algorithm. You should\rkeep in mind that any function that uses recursion can be rewritten in an iterative manner."
Data Structures and Algorithms.pdf	brad	Highlight	17	4/19/2014 12:47:51 AM 	Objects and Object-Oriented Programming\rThe data structures discussed in this book are implemented as objects. JavaScript provides many\rdifferent ways for creating and using objects. In this section we demonstrate the techniques used in\rthis book for creating objects and for creating and using an object’s functions and properties.
Data Structures and Algorithms.pdf	brad	Highlight	20	4/19/2014 12:51:59 AM 	"JavaScript Arrays Defined\rThe standard definition for an array is a linear collection of elements, where the elements can be\raccessed via indices, which are usually integers used to compute offsets. Most computer\rprogramming languages have these types of arrays. JavaScript, on the other hand, has a different\rtype of array altogether."
Data Structures and Algorithms.pdf	brad	Highlight	20	4/19/2014 12:52:22 AM 	"A JavaScript array is actually a specialized type of JavaScript object, with the indices being\rproperty names that can be integers used to represent offsets. However, when integers are used for\rindices, they are converted to strings internally in order to conform to the requirements for\rJavaScript objects. Because JavaScript arrays are just objects, they are not quite as efficient as\rthe arrays of other programming languages."
Data Structures and Algorithms.pdf	brad	Highlight	20	4/19/2014 12:52:28 AM 	"While JavaScript arrays are, strictly speaking, JavaScript objects, they are specialized objects\rcategorized internally as arrays. The Array is one of the recognized JavaScript object types, and\ras such, there is a set of properties and functions you can use with arrays."
Data Structures and Algorithms.pdf	brad	Highlight	21	4/19/2014 12:55:12 AM 	"Unlike many other programming languages, but common for most scripting languages, JavaScript\rarray elements do not all have to be of the same type:"
Data Structures and Algorithms.pdf	brad	Highlight	21	4/19/2014 12:55:20 AM 	"We can verify that an object is an array by calling the Array.isArray() function, like this:"
Data Structures and Algorithms.pdf	brad	Highlight	22	4/19/2014 12:58:12 AM 	"Creating Arrays from Strings\rArrays can be created as the result of calling the split() function on a string. This function breaks\rup a string at a common delimiter, such as a space for each word, and creates an array consisting\rof the individual parts of the string."
Data Structures and Algorithms.pdf	brad	Highlight	23	4/19/2014 12:59:04 AM 	"Aggregate Array Operations\rThere are several aggregate operations you can perform on arrays. First, you can assign one array\rto another array:"
Data Structures and Algorithms.pdf	brad	Highlight	23	4/19/2014 12:59:11 AM 	"However, when you assign one array to another array, you are assigning a reference to the\rassigned array. When you make a change to the original array, that change is reflected in the other\rarray as well. The following code fragment demonstrates how this works:"
Data Structures and Algorithms.pdf	brad	Highlight	23	4/19/2014 12:59:32 AM 	"This is called a shallow copy. The new array simply points to the original array’s elements. A\rbetter alternative is to make a deep copy, so that each of the original array’s elements is actually\rcopied to the new array’s elements. An effective way to do this is to create a function to perform\rthe task:"
Data Structures and Algorithms.pdf	brad	Highlight	24	4/19/2014 1:00:36 AM 	"Searching for a Value\rOne of the most commonly used accessor functions is indexOf(), which looks to see if the\rargument passed to the function is found in the array. If the argument is contained in the array, the\rfunction returns the index position of the argument. If the argument is not found in the array, the\rfunction returns -1. Here is an example:"
Data Structures and Algorithms.pdf	brad	Highlight	26	4/19/2014 1:00:59 AM 	"Mutator Functions\rJavaScript has a set of mutator functions that allow you to modify the contents of an array without\rreferencing the individual elements. These functions often make hard techniques easy, as you’ll\rsee below."
Data Structures and Algorithms.pdf	brad	Highlight	26	4/19/2014 1:01:06 AM 	Adding Elements to an Array\rThere are two mutator functions for adding elements to an array: push() and unshift(). The push()\rfunction adds an element to the end of an array:
Data Structures and Algorithms.pdf	brad	Highlight	30	4/19/2014 1:02:12 AM 	"Iterator Functions\rThe final set of array functions we examine are iterator functions. These functions apply a\rfunction to each element of an array, either returning a value, a set of values, or a new array after\rapplying the function to each element of an array."
Data Structures and Algorithms.pdf	brad	Highlight	30	4/19/2014 1:02:05 AM 	"Non–Array-Generating Iterator Functions\rThe first group of iterator functions we’ll discuss do not generate a new array; instead, they either\rperform an operation on each element of an array or generate a single value from an array.\rThe first of these functions is forEach(). This function takes a function as an argument and applies\rthe called function to each element of an array. Here is an example of how it works:"
Data Structures and Algorithms.pdf	brad	Highlight	39	4/19/2014 1:03:48 AM 	Arrays in Objects\rWe can use arrays to store complex data in an object. Many of the data structures we study in this\rbook are implemented as class objects with an underlying array used to store data.
Data Structures and Algorithms.pdf	brad	Highlight	41	4/19/2014 1:04:49 AM 	"Lists are\respecially useful if we don’t have to perform searches on the items in the list or put them into\rsome type of sorted order. When we need to perform long searches or complex sorts, lists become\rless useful, especially with more complex data structures."
Data Structures and Algorithms.pdf	brad	Highlight	41	4/19/2014 1:06:58 AM 	This chapter presents the creation of a simple list class. We start with the definition of a list\rabstract data type (ADT) and then demonstrate how to implement the ADT. We wrap up the\rchapter with some problems that are best solved with lists.
Data Structures and Algorithms.pdf	brad	Highlight	47	4/28/2014 10:03:37 PM 	"Iterating Through a List\rAn iterator allows us to traverse a list without referencing the internal storage mechanism of the\rList class. The functions front(), end(), prev(), next(), and currPos provide an implementation of\ran iterator for our List class. Some advantages to using iterators over using array indexing\rinclude:"
Data Structures and Algorithms.pdf	brad	Highlight	54	4/29/2014 12:44:05 AM 	"Lists are a natural form of organization for data. We have already seen how to use the List class to\rorganize data into a list. When the order of the data being stored doesn’t matter, or when you don’t\rhave to search the data stored, lists work wonderfully. For other applications, however, plain lists\rare too simple and we need a more complex, list-like data structure.\rA list-like structure that can be used to solve many problems in computing is the stack. Stacks are\refficient data structures because data can be added or removed only from the top of a stack,\rmaking these procedures fast and easy to implement. Stacks are used extensively in programming\rlanguage implementations for everything from expression evaluation to handling function calls."
Data Structures and Algorithms.pdf	brad	Highlight	54	4/29/2014 12:44:55 AM 	The two primary operations of a stack are adding elements to a stack and taking elements off a\rstack. Elements are added to a stack using the push operation. Elements are taken off a stack using\rthe pop operation. These operations are illustrated in Figure 4-1.
Data Structures and Algorithms.pdf	brad	Highlight	55	4/29/2014 12:45:45 AM 	"Another common operation on a stack is viewing the element at the top of a stack. The pop\roperation visits the top element of a stack, but it permanently removes the element from a stack.\rThe peek operation returns the value stored at the top of a stack without removing it from the\rstack."
Data Structures and Algorithms.pdf	brad	Highlight	55	4/29/2014 12:46:19 AM 	"To keep track of where the top element is, as well as keeping track of where to add a new\relement, we use a top variable that is incremented when we push new elements onto the stack and\ris decremented when we pop elements off the stack.\rWhile pushing, popping, and peeking are the primary operations associated with a stack, there are\rother operations we need to perform and properties we need to examine. The clear operation\rremoves all the elements from a stack. The length property holds the number of elements contained\rin a stack. We also define an empty property to let us know if a stack has no elements in it, though\rwe can use the length property for this as well."
Data Structures and Algorithms.pdf	brad	Highlight	79	4/19/2014 3:22:55 AM 	"The main problem with using JavaScript arrays, however, is that arrays in JavaScript are\rimplemented as objects, causing them to be less efficient than arrays built in languages such as\rC++ and Java (see Crockford, Chapter 6)."
Data Structures and Algorithms.pdf	brad	Highlight	79	4/19/2014 3:23:13 AM 	"When you determine that the operations performed on an array are too slow for practical use, you\rcan consider using the linked list as an alternative data structure. The linked list can be used in\ralmost every situation where a one-dimensional array is used, except when you need random\raccess to the elements of a list. When random access is required, an array is the better data\rstructure to use."
Data Structures and Algorithms.pdf	brad	Highlight	79	4/19/2014 3:24:50 AM 	Linked Lists Defined\rA linked list is a collection of objects called nodes. Each node is linked to a successor node in the\rlist using an object reference. The reference to another node is called a link.
Data Structures and Algorithms.pdf	brad	Highlight	80	4/19/2014 3:25:51 AM 	"While array elements are referenced by their position, linked list elements are referenced by their\rrelationship to the other elements of the linked list."
Data Structures and Algorithms.pdf	brad	Highlight	80	4/19/2014 3:26:19 AM 	"In Figure 6-1, we say that “bread” follows\r“milk”, not that “bread” is in the second position. Moving through a linked list involves following\rthe links of the list from the beginning node to the end node (not including the header node, which\ris sometimes used as a hook for entry into a linked list). Something else to notice in the figure is\rthat we mark the end of a linked list by pointing to a null node."
Data Structures and Algorithms.pdf	brad	Highlight	80	4/19/2014 3:26:32 AM 	"Marking the beginning of a linked list can be a problem. Many linked-list implementations include\ra special node, called the head, to denote the beginning of a linked list."
Data Structures and Algorithms.pdf	brad	Highlight	80	4/19/2014 3:27:21 AM 	"Removing an item from a linked list is also easy to do. The link of the node before the removed\rnode is redirected to point to the node the removed node is pointing to, while also pointing the\rremoved node to null, effectively taking the node out of the linked list."
Data Structures and Algorithms.pdf	brad	Highlight	81	4/19/2014 3:27:56 AM 	"An Object-Based Linked List Design\rOur design of a linked list will involve creating two classes. We’ll create a Node class for adding\rnodes to a linked list, and we’ll create a LinkedList class, which will provide functions for\rinserting nodes, removing nodes, displaying a list, and other housekeeping functions."
Data Structures and Algorithms.pdf	brad	Highlight	94	4/19/2014 4:01:45 AM 	"A dictionary is a data structure that stores data as key-value pairs, such as the way a phone book\rstores its data as names and phone numbers. When you look for a phone number, you first search\rfor the name, and when you find the name, the phone number is found right next to the name. The\rkey is the element you use to perform a search, and the value is the result of the search."
Data Structures and Algorithms.pdf	brad	Highlight	124	4/19/2014 4:02:52 AM 	"Binary trees are chosen over other\rmore primary data structures because you can search a binary tree very quickly (as opposed to a\rlinked list, for example) and you can quickly insert and delete data from a binary tree (as opposed\rto an array)."