File Name	Name	Type	Page	Modification Date	Comment
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	110	4/29/2014 8:39:06 PM 	Compound-assignment operators exist for each of the major mathematical operations and a few\rothers as well. They are as follows:\rMultiply/assign (*=)\rDivide/assign (/=)\rModulus/assign (%=)\rAdd/assign (+=)\rSubtract/assign (-=)\rLeft shift/assign (<<=)\rSigned right shift/assign (>>=)\rUnsigned right shift/assign (>>>=)\rThese operators are designed specifi cally as shorthand ways of achieving operations. They do not\rrepresent any performance improvement.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	179	4/24/2014 4:08:46 AM 	"In this code, a variable sum is defi ned and initialized to be a function. Note that there is no name\rincluded after the function keyword, because it’s not needed — the function can be referenced\rby the variable sum. Also note that there is a semicolon after the end of the function, just as there\rwould be after any variable initialization."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	179	4/24/2014 4:09:26 AM 	"Because function names are simply pointers to functions, they act like any other variable containing\ra pointer to an object. This means it’s possible to have multiple names for a single function, as in\rthis example:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	179	4/24/2014 4:09:45 AM 	Note that using the function name without parentheses accesses the\rfunction pointer instead of executing the function.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	180	4/24/2014 4:10:43 AM 	"Function Declarations versus Function Expressions\rThroughout this section, the function declaration and function expression are referred to as being\ralmost equivalent. This hedging is due to one major difference in the way that a JavaScript engine\rloads data into the execution context. Function declarations are read and available in an execution\rcontext before any code is executed, whereas function expressions aren’t complete until the\rexecution reaches that line of code."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	180	4/24/2014 4:10:56 AM 	"This code runs perfectly, because function declarations are read and added to the execution context\rbefore the code begins running through a process called function declaration hoisting. As the code\ris being evaluated, the JavaScript engine does a fi rst pass for function declarations and pulls them\rto the top of the source tree."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	181	4/24/2014 4:11:22 AM 	"This updated code will cause an error, because the function is part of an initialization statement,\rnot part of a function declaration. That means the function isn’t available in the variable sum\runtil the highlighted line has been executed, which won’t happen, because the fi rst line causes an\r“unexpected identifi er” error."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	181	4/24/2014 4:12:08 AM 	"Functions as Values\rBecause function names in ECMAScript are nothing more than variables, functions can be used any\rplace any other value can be used. This means it’s possible not only to pass a function into another\rfunction as an argument but also to return a function as the result of another function."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	182	4/24/2014 4:13:14 AM 	"function createComparisonFunction(propertyName) {\rreturn function(object1, object2){\rvar value1 = object1[propertyName];\rvar value2 = object2[propertyName];\rif (value1 < value2){\rreturn -1;\r} else if (value1 > value2){\rreturn 1;\r} else {\rreturn 0;\r}\r};\r}"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	183	4/24/2014 4:14:23 AM 	"Function Internals\rTwo special objects exist inside a function: arguments and this. The arguments object, as\rdiscussed in Chapter 3, is an array-like object that contains all of the arguments that were passed\rinto the function. Though its primary use is to represent function arguments, the arguments object\ralso has a property named callee, which is a pointer to the function that owns the arguments\robject."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Text	183	4/24/2014 4:15:25 AM 	Pickup Here
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	205	4/20/2014 10:31:31 PM 	"The eval() Method\rThe fi nal method is perhaps the most powerful in the entire ECMAScript language: the eval()\rmethod. This method works like an entire ECMAScript interpreter and accepts one argument, a\rstring of ECMAScript (or JavaScript) to execute."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	205	4/20/2014 10:31:47 PM 	"When the interpreter fi nds an eval() call, it interprets the argument into actual ECMAScript\rstatements and then inserts it into place. Code executed by eval() is considered to be part of the\rexecution context in which the call is made, and the executed code has the same scope chain as that"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	223	4/7/2014 9:35:50 PM 	"In this example, the Person() function takes the place of the factory createPerson() function.\rNote that the code inside Person() is the same as the code inside createPerson(), with the\rfollowing exceptions:\rThere is no object being created explicitly.\rThe properties and method are assigned directly onto the this object.\rThere is no return statement."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	223	4/7/2014 9:35:41 PM 	"Also note the name of the function is Person with an uppercase P. By convention, constructor\rfunctions always begin with an uppercase letter, whereas nonconstructor functions begin with a"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	224	4/7/2014 9:36:04 PM 	"lowercase letter. This convention is borrowed from other OO languages and helps to distinguish\rfunction use in ECMAScript, since constructors are simply functions that create objects."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	224	4/7/2014 9:36:42 PM 	"Each of these objects has a constructor property that points back to Person, as follows:\ralert(person1.constructor == Person); //true\ralert(person2.constructor == Person); //true"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	224	4/7/2014 9:37:21 PM 	"The constructor property was originally intended for use in identifying the object type. However, the\rinstanceof operator is considered to be a safer way of determining type."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	224	4/7/2014 9:37:49 PM 	"Defi ning your own constructors ensures that instances can be identifi ed as a particular type later\ron, which is a great advantage over the factory pattern. In this example, person1 and person2 are\rconsidered to be instances of Object, because all custom objects inherit from Object (the specifi cs\rof this are discussed later)."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	226	4/7/2014 10:44:57 PM 	"The Prototype Pattern\rEach function is created with a prototype property, which is an object containing properties and\rmethods that should be available to instances of a particular reference type. This object is literally\ra prototype for the object to be created once the constructor is called. The benefi t of using the\rprototype is that all of its properties and methods are shared among object instances. Instead of\rassigning object information in the constructor, they can be assigned directly to the prototype, as in\rthis example:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	263	4/27/2014 6:17:17 AM 	Closures\rare functions that have access to variables from another function’s scope.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	267	4/27/2014 6:15:52 AM 	"Anonymous functions are not bound to an object in\rthis context, meaning the this object points to window unless executing in strict mode (where this\ris undefined)."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	281	4/20/2014 11:27:23 AM 	Browser Object Model (BOM)\ris really the core of using JavaScript on the Web.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	281	4/20/2014 11:27:38 AM 	"Part of the HTML5 specifi cation now covers the major aspects of the BOM, as the W3C seeks\rto standardize one of the most fundamental parts of JavaScript in the browser."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	281	4/20/2014 11:27:56 AM 	"THE WINDOW OBJECT\rAt the core of the BOM is the window object, which represents an instance of the browser.\rThe window object serves a dual purpose in browsers, acting as the JavaScript interface to the\rbrowser window and the ECMAScript Global object. This means that every object, variable,\rand function defi ned in a web page uses window as its Global object and has access to\rmethods like parseInt()."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	282	4/20/2014 11:28:32 AM 	"The Global Scope\rSince the window object doubles as the ECMAScript Global object, all variables and functions\rdeclared globally become properties and methods of the window object. Consider this example:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	282	4/20/2014 11:39:46 AM 	"Despite global variables becoming properties of the window object, there is a slight difference between\rdefi ning a global variable and defi ning a property directly on window: global variables cannot be\rremoved using the delete operator, while properties defi ned directly on window can."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	282	4/20/2014 11:40:49 AM 	Properties of window that were added via var statements have their [[Configurable]] attribute\rset to false and so may not be removed via the delete operator.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	282	4/20/2014 11:41:13 AM 	"Another thing to keep in mind: attempting to access an undeclared variable throws an error, but it\ris possible to check for the existence of a potentially undeclared variable by looking on the window\robject. For example:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	283	4/20/2014 11:41:40 AM 	"Keeping this in mind, there are many objects in JavaScript that are considered to be global, such as\rlocation and navigator (both discussed later in the chapter), but are actually properties of the\rwindow object."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	283	4/20/2014 11:42:08 AM 	"Window Relationships and Frames\rIf a page contains frames, each frame has its own window object and is stored in the frames\rcollection. Within the frames collection, the window objects are indexed both by number (starting\rat 0, going from left to right, and then row by row) and by the name of the frame. Each window\robject has a name property containing the name of the frame."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	283	4/20/2014 11:43:13 AM 	"you would probably use the top object instead of window to refer to these frames (making it top\r.frames[0], for instance)."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	283	4/20/2014 11:43:24 AM 	"The top object always points to the very top (outermost) frame, which is the browser window itself."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	283	4/20/2014 11:43:48 AM 	This ensures that you are pointing to the correct frame from which to access the others. Any code\rwritten within a frame that references the window object is pointing to that frame’s unique instance\rrather than the topmost one.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	284	4/20/2014 11:44:25 AM 	"Another window object is called parent. The parent object always points to the current frame’s\rimmediate parent frame. In some cases, parent may be equal to top, and when there are no frames,\rparent is equal to top (and both are equal to window)."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	285	4/20/2014 11:45:31 AM 	"There is one fi nal window object, called self, which always points to window. The two can, in fact,\rbe used interchangeably. Even though it has no separate value, self is included for consistency with\rthe top and parent objects."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	286	4/20/2014 11:45:54 AM 	"Whenever frames are used, multiple Global objects exist in the browser. Global\rvariables defi ned in each frame are defi ned to be properties of that frame’s\rwindow object. Since each window object contains the native type constructors,\reach frame has its own version of the constructors, which are not equal. For\rexample, top.Object is not equal to top.frames[0].Object, which affects the\ruse of instanceof when objects are passed across frames."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	286	4/20/2014 7:45:10 PM 	"Internet Explorer, Safari, Opera, and Chrome all provide screenLeft and screenTop\rproperties that indicate the window’s location in relation to the left and top of the screen,\rrespectively."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	286	4/20/2014 7:45:27 PM 	"Firefox provides this functionality through the screenX and screenY properties,"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	289	4/20/2014 9:47:53 PM 	"The window.open() method can be used both to navigate to a particular URL and to open a new\rbrowser window. This method accepts four arguments: the URL to load, the window target, a\rstring of features, and a Boolean value indicating that the new page should take the place of the\rcurrently loaded page in the browser history. Typically only the fi rst three arguments are used; the\rlast argument applies only when not opening a new window."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	290	4/20/2014 9:52:40 PM 	"The window.open() method returns a reference to the newly created window. This object is the\rsame as any other window object except that you typically have more control over it. For instance,\rsome browsers that don’t allow you to resize or move the main browser window by default may\rallow you to resize or move windows that you’ve created using window.open(). This object can be\rused to manipulate the newly opened window in the same way as any other window, as shown in\rthis example:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	291	4/20/2014 9:53:20 PM 	"This method works only for pop-up windows created by window.open(). It’s not possible to close\rthe main browser window without confi rmation from the user. It is possible, however, for the\rpop-up window to close itself without user confi rmation by calling top.close(). Once the window\rhas been closed, the window reference still exists but cannot be used other than to check the closed\rproperty, as shown here:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	291	4/20/2014 9:54:00 PM 	The newly created window object has a reference back to the window that opened it via the opener\rproperty. This property is defi ned only on the topmost window object (top) of the pop-up window\rand is a pointer to the window or frame that called window.open().
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	291	4/20/2014 9:53:53 PM 	"Even though there is a pointer from the pop-up window back to the window that opened it, there is\rno reverse relationship. Windows do not keep track of the pop-ups that they spawn, so it’s up to you\rto keep track if necessary."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	292	4/20/2014 9:55:14 PM 	"Internet Explorer lifts some restrictions on pop-up windows when displaying a\rweb page stored on the computer’s hard drive. The same code, when run on\ra server, will invoke the pop-up restrictions."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	293	4/20/2014 10:29:35 PM 	"JavaScript execution in a browser is single-threaded, but does allow for the scheduling of code to\rrun at specifi c points in time through the use of timeouts and intervals. Timeouts execute some\rcode after a specifi ed amount of time, whereas intervals execute code repeatedly, waiting a specifi c\ramount of time in between each execution."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	293	4/20/2014 10:29:48 PM 	"You set a timeout using the window’s setTimeout() method, which accepts two arguments: the\rcode to execute and the number of time (in milliseconds) to wait before attempting to execute\rthe code."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	293	4/20/2014 10:33:50 PM 	"The second argument, the number of milliseconds to wait, is not necessarily when the specifi ed code\rwill execute. JavaScript is single-threaded and, as such, can execute only one piece of code at a time.\rTo manage execution, there is a queue of JavaScript tasks to execute. The tasks are executed in\rthe order in which they were added to the queue. The second argument of setTimeout() tells the\rJavaScript engine to add this task onto the queue after a set number of milliseconds. If the queue is\rempty, then that code is executed immediately; if the queue is not empty, the code must wait its turn."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	294	4/20/2014 10:34:18 PM 	"As long as clearTimeout() is called before the specifi ed amount of time has passed, a timeout\rcan be canceled completely."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	294	4/20/2014 10:34:50 PM 	"The setInterval() method also returns an interval ID that can be used to cancel the interval\rat some point in the future. The clearInterval() method can be used with this ID to cancel all\rpending intervals. This ability is more important for intervals than timeouts since, if left unchecked,\rthey continue to execute until the page is unloaded. Here is a common example of interval usage:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	301	4/20/2014 10:35:44 PM 	"THE NAVIGATOR OBJECT\rOriginally introduced in Netscape Navigator 2, the navigator object is the standard for browser\ridentifi cation on the client. Though some browsers offer alternate ways to provide the same or\rsimilar information (for example, window.clientInformation in Internet Explorer and window\r.opera in Opera), the navigator object is common among all JavaScript-enabled web browsers. As\rwith other BOM objects, each browser supports its own set of properties. The following table lists\reach available property and method, along with which browser versions support it."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	304	4/20/2014 10:36:55 PM 	"Detecting Plug-ins\rOne of the most common detection procedures is to determine whether the browser has a particular\rplug-in installed. For browsers other than Internet Explorer, this can be determined using the\rplugins array. Each item in the array contains the following properties:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	305	4/20/2014 10:38:04 PM 	"Detecting plug-ins in Internet Explorer is more problematic, because it doesn’t support Netscapestyle\rplug-ins. The only way to detect plug-ins in Internet Explorer is to use the proprietary\rActiveXObject type and attempt to instantiate a particular plug-in."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	306	4/20/2014 10:38:31 PM 	"Registering Handlers\rFirefox 2 introduced the registerContentHandler() and registerProtocolHandler() methods\rto the navigator object. (These are now formally defi ned in HTML 5.) These methods allow a\rWebsite to indicate that it can handle specifi c types of information. With the rise of online RSS\rreaders and online e-mail applications, this is a way for those applications to be used by default just\ras desktop applications are used."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	306	4/20/2014 10:38:42 PM 	"The registerContentHandler() method accepts three arguments: the MIME type to handle, the\rURL of the page that can handle that MIME type, and the name of the application. For instance, to\rregister a site as a handler of RSS feeds, you can use the following code:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	307	4/20/2014 10:39:24 PM 	"THE SCREEN OBJECT\rThe screen object (also a property of window) is one of the few JavaScript objects that have little\rto no programmatic use; it is used purely as an indication of client capabilities. This object provides\rinformation about the client’s display outside the browser window, including information such\ras pixel width and height. Each browser provides different properties on the screen object. The\rfollowing table indicates the properties and which browsers support them.\rwww."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	309	4/20/2014 10:40:31 PM 	"THE HISTORY OBJECT\rThe history object represents the user’s navigation history since the given window was fi rst\rused. Because history is a property of window, each browser window, tab, and frame has its own\rhistory object relating specifi cally to that window object. For security reasons, it’s not possible to\rdetermine the URLs that the user has visited. It is possible, however, to navigate backwards and\rforwards through the list of places the user has been without knowing the exact URL."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	309	4/20/2014 10:41:01 PM 	"The go() method navigates through the user’s history in either direction, backward or forward.\rThis method accepts a single argument, which is an integer representing the number of pages to\rgo backward or forward."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	309	4/20/2014 11:51:20 PM 	"The go() method argument can also be a string, in which case the browser navigates to the fi rst\rlocation in history that contains the given string. The closest location may be either backward or\rforward."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	310	4/20/2014 11:51:34 PM 	"Two shortcut methods, back() and forward(), may be used in place of go(). As you might expect,\rthese mimic the browser Back and Forward buttons as follows:\r//go back one page\rhistory.back();\r//go forward one page\rhistory.forward();"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	310	4/20/2014 11:52:10 PM 	"The history object also has a property, length, which indicates how many items are in the\rhistory stack. This property refl ects all items in the history stack, both those going backward and\rthose going forward. For the fi rst page loaded into a window, tab, or frame, history.length is\requal to 0. By testing for this value as shown here, it’s possible to determine if the user’s start point\rwas your page:"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	313	4/20/2014 11:53:48 PM 	CAPABILITY DETECTION\rThe most commonly used and widely accepted form of client detection is called capability\rdetection. Capability detection (also called feature detection) aims not to identify a specifi c\rbrowser being used but rather to identify the browser’s capabilities.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	314	4/20/2014 11:54:40 PM 	"There are two important concepts to understand in capability detection. As just mentioned, the\rmost common way to achieve the result should be tested for fi rst. In the previous example, this\rmeant testing for document.getElementById() before document.all. Testing for the most\rcommon solution ensures optimal code execution by avoiding multiple-condition testing in\rthe common case."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	351	4/23/2014 6:05:24 AM 	"The Document Object Model (DOM) is an application programming interface (API) for\rHTML and XML documents. The DOM represents a document as a hierarchical tree of\rnodes, allowing developers to add, remove, and modify individual parts of the page. Evolving\rout of early Dynamic HTML (DHTML) innovations from Netscape and Microsoft, the DOM\ris now a truly cross-platform, language-independent way of representing and manipulating\rpages for markup."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	351	4/23/2014 6:05:48 AM 	"DOM Level 1 became a W3C recommendation in October 1998, providing interfaces for basic\rdocument structure and querying. This chapter focuses on the features and uses of DOM\rLevel 1 as it relates to HTML pages in the browser and its implementation in JavaScript."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	351	4/23/2014 6:06:03 AM 	Note that all DOM objects are represented by COM objects in Internet Explorer 8\rand earlier. This means that the objects don’t behave or function the same way\ras native JavaScript objects. These differences are highlighted throughout the\rchapter.
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	352	4/23/2014 6:07:07 AM 	"A document node represents every document as the root. In this example, the only child of the\rdocument node is the <html> element, which is called the document element. The document element\ris the outermost element in the document within which all other elements exist. There can be only\rone document element per document. In HTML pages, the document element is always the <html>\relement. In XML, where there are no predefi ned elements, any element may be the document element."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	352	4/23/2014 6:07:21 AM 	"Every piece of markup can be represented by a node in the tree: HTML elements are represented by\relement nodes, attributes are represented by attribute nodes, the document type is represented by a\rdocument type node, and comments are represented by comment nodes. In total, there are 12 node\rtypes, all of which inherit from a base type."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	352	4/23/2014 6:07:46 AM 	"The Node Type\rDOM Level 1 describes an interface called Node that is to be implemented by all node types in\rthe DOM. The Node interface is implemented in JavaScript as the Node type, which is accessible\rin all browsers except Internet Explorer. All node types inherit from Node in JavaScript, so all node\rtypes share the same basic properties and methods."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	352	4/23/2014 6:08:09 AM 	Every node has a nodeType property that indicates the type of node that it is. Node types are\rrepresented by one of the following 12 numeric constants on the Node type:
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	812	4/14/2014 9:42:26 PM 	"It’s important to note that the domain, path, expiration date, and secure fl ag are indications to the\rbrowser as to when the cookie should be sent with a request. These arguments are not actually sent\ras part of the cookie information to the server; only the name-value pairs are sent."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	812	4/14/2014 9:43:31 PM 	"Cookies in JavaScript\rDealing with cookies in JavaScript is a little complicated because of a notoriously poor interface,\rthe BOM’s document.cookie property. This property is unique in that it behaves very differently\rdepending on how it is used. When used to retrieve the property value, document.cookie returns"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	813	4/14/2014 9:44:10 PM 	"a string of all cookies available to the page (based on the domain, path, expiration, and security\rsettings of the cookies) as a series of name-value pairs separated by semicolons, as in the following\rexample:\rname1=value1;name2=value2;name3=value3\rAll of the names and values are URL-encoded and so must be decoded via decodeURIComponent()."
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	813	4/14/2014 9:44:56 PM 	"This code creates a session cookie called “name” that has a value of “Nicholas”. This cookie will be\rsent every time the client makes a request to the server; it will be deleted when the browser is closed.\rAlthough this will work, as there are no characters that need to be encoded in either the name or the\rvalue, it’s a best practice to always use encodeURIComponent() when setting a cookie, as shown in\rthe following example:\rdocument.cookie = encodeURIComponent(“name”) + “=” +\rencodeURIComponent(“Nicholas”);"
Professional JavaScript for Web Developers, 3rd Edition.pdf	brad	Highlight	813	4/14/2014 9:45:39 PM 	"Since the reading and writing of cookies in JavaScript isn’t very straightforward, functions are often\rused to simplify cookie functionality. There are three basic cookie operations: reading, writing, and\rdeleting. These are all represented in the CookieUtil object as follows:"