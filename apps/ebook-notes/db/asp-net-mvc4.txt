File Name	Name	Type	Page	Modification Date	Comment
Beginning ASP.NET MVC 4.pdf	brad	Highlight	6	3/25/2014 7:30:26 PM 	"A year later, version 3.0 added Windows\rCommunication Foundation (WCF), Windows Presentation Foundation (WPF), Windows Workflow Foundation (WF),\rand Windows CardSpace. In"
Beginning ASP.NET MVC 4.pdf	brad	Highlight	6	3/25/2014 7:30:53 PM 	"Version 4.0, released in 2010,\radded a new set of features, such as extensible output caching, jQuery as the default JavaScript library, routing in the\rframework, a much better ViewState control, and a lot of improvements to existing functionality."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	9	3/25/2014 7:35:38 PM 	"ASMX files are ASP.NET web services, introduce in .NET 2.0. These files provide services for\rpages in the application or any other program that can access them. ASMX web services are\rnow being replaced by Windows Communication Foundation (WCF) services (introduced\rin .NET 3.0), which have the extension .svc and offer much-improved security and\rscalability features."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	10	3/25/2014 7:37:26 PM 	Consider using HTML controls when any of the following conditions exists:
Beginning ASP.NET MVC 4.pdf	brad	Highlight	10	3/25/2014 7:37:38 PM 	The control needs to have custom client-side JavaScript attached to the control’s events.
Beginning ASP.NET MVC 4.pdf	brad	Highlight	10	3/25/2014 7:38:05 PM 	ASP.NET Web Pages (now in version 2) is a framework for building web applications in which pages use the\rRazor syntax.
Beginning ASP.NET MVC 4.pdf	brad	Highlight	10	3/25/2014 7:38:29 PM 	"ASP.NET Razor uses a simple programming syntax that lets you embed server-based code into a web page. Razor\rpages use the extension .cshtml or .vbhtml depending on the language of choice (C# or VB.NET). Because the code is\rembedded in the web page, the idea of a code-behind file doesn’t exist in Razor. The content in Razor pages is created\rwith HTML, and there are no web server controls such as <asp:Button />."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	10	3/25/2014 7:39:16 PM 	"You can use Visual Studio to create ASP.NET Web Pages, but the main tool to use is Microsoft WebMatrix 2.\rWith WebMatrix 2, you have access to web helpers, which let your applications use common services such as Twitter,\rreCAPTCHA, Gravatars, Bing Maps, and more. Also, your applications can be extended using packages from the\rNuGet Gallery. You use NuGet’s graphic interface or command line window to request the packages you want and\rthen they will be downloaded, installed, and configured in your application automatically."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	11	3/25/2014 7:39:45 PM 	ASP.NET MVC is a free and fully supported framework for building web applications that use the model-view-controller\rpattern.
Beginning ASP.NET MVC 4.pdf	brad	Highlight	11	3/25/2014 7:40:00 PM 	"Like ASP.NET Web Forms, ASP.NET MVC is built on top of the ASP.NET Framework. This means you can use\rin ASP.NET MVC applications the same APIs for security, state management, membership, caching, and so on that\ryou could use in traditional ASP.NET Web Forms applications."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	11	3/25/2014 7:40:23 PM 	"In the ASP.NET MVC world, many improvements to ASP.NET have been included in the framework itself.\rThe main purpose of this design pattern is to isolate business logic from the user interface in order to focus on better\rmaintainability, improved testability, and a cleaner structure to the application.\rEvery ASP.NET MVC application has three core parts: a model, views, and controllers. In short, the model\rconsists of all the classes that handle data and business logic. Data processing using model classes is initiated by the\rcontrollers that are in charge of user requests. Once the data processing is complete the controller creates a response\rto the user by sending the results to a View who then produces HTML to be rendered in the browser."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	11	3/25/2014 7:42:06 PM 	"The model in the MVC pattern represents the parts of the application that implement the data domain logic.\rThe operation of the model might come from the generation of classes representing objects in a data store such as a\rdatabase (for example, Entity Framework data classes)."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	11	3/25/2014 7:42:27 PM 	"Views are the visible elements in the application. They are the components that typically show users data from\rthe model. A view page typically receives a view model object from the controller (the view doesn’t care how this data\rwas obtained—that’s the controller’s responsibility!). The view page contains HTML (and possibly some UI-related\rcode) to determine how to render the model data back to the browser.\rThe controllers are classes that collect the user requests, work with the model, and ultimately select a view to\rrender the appropriate UI."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	12	3/25/2014 7:42:59 PM 	"When to Use ASP.NET MVC\rASP.NET MVC has certain capabilities that make it the best option to choose if you need one or more of the following:\r• A high level of control over the generated HTML: Unlike Web Forms, Views in ASP.NET MVC\rrender HTML exactly as you tell them to. Recently, Web Forms have been improved in this\rarea but still don’t have the level of control MVC has.\r• Easier unit testing: With ASP.NET MVC, it is very easy to follow testing patterns such as\rtest-driven development (TDD). Because of the complex event lifecycle in Web Forms,\ron top of a control-based framework, TDD is a lot easier with MVC.\r• Separation of concerns: This refers to having all aspects of the system clearly separated from\rone another. Because of the pattern it implements, an MVC application is divided into discrete\rand loosely bound parts (model, views, and controllers), which makes it easy to maintain."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	12	3/25/2014 7:43:39 PM 	"ASP.NET MVC Benefits\rCompared to Web Forms, ASP.NET MVC applications benefit by including all ASP.NET core features but also by the\rfeatures in the MVC pattern. Some of those benefits are:\rThe MVC pattern itself makes it easier t • o manage complexity by clearly separating the\rfunctionality of the application into three core parts, the model, the view, and the controller.\r• ASP.NET MVC web applications do not use view state or server-based forms. This makes the\rMVC framework ideal for developers who want full control over the behavior of an application.\rView state can become very large, which is a problem for devices like smartphones running\rover slow networks (transmitting all that information can be very slow). In a Web Forms page,\ryou could only have one <form> per page. This is quite a major restriction. In MVC, there is no\rsuch restriction—that is, you can have as many<form> elements as you like.\r• ASP.NET MVC provides better support for test-driven development (TDD).\r• ASP.NET MVC works well for web applications that are supported by large teams of developers\rand for web designers who need a high degree of control over the HTML."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	12	3/25/2014 7:45:08 PM 	"ASP.NET MVC Request Processing\rOne of the most important concepts to understand about MVC applications is that no relationship exists between a\rpage request and a physical file inside the web server. In a traditional Web Forms and Web Pages application, every\rpage request is translated into a call to a physical file in the webserver. For example, if your request is something\rlike http://myapp/mypage.aspx, the web server interprets the request by looking at the root of the website for a file\rnamed mypage.aspx.It then processes the file and returns the generated HTML."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	12	3/25/2014 7:45:19 PM 	"In the case of an MVC application, when you make a request (e.g.,http://myapp/product/list), a component\rcalled routing engine matches the request to a specific route. A route defines requests using a pattern string and\restablishes the controller and method in the controller class that should process the request. Once the route is\ridentified, the routing engine creates a request handler that in turn will create the controller object that will process\rthe request (in our example, the controller is “product”). The controller then invokes the method in the controller\rclass that will process the request (in the example is named “list”). These methods in controller classes that process\rrequests are called action methods. When the processing of the request ends, the action method produces a result to\rsend back to the user. Normally the result is some HTML (rendered by a View) the user will see in the browser."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	43	6/2/2014 1:19:08 AM 	"In this chapter you will see that in the world of the MVC pattern, controllers process incoming HTTP requests from\rusers. Each HTTP request is handled by a specific controller. ASP.NET MVC implements the concept of controllers\rwith .NET classes that have methods to process such requests. The methods in a controller are called action methods\rbecause they return an object of type ActionResult.\rThe processing of a request starts with an element called the routing engine, which maps the request to a controller\rand a method (this chapter provides only a brief introduction to routing; Chapter 10 examines it in more detail). After\rthat, the method is executed and produces an action result object that is returned to the user. The most common type of\raction result object is a View that renders HTML in the browser."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	43	6/2/2014 1:19:43 AM 	"The Routing Engine\rThe ASP.NET MVC 4 Internet Application template in Visual Studio includes two default routes so that the project\rwill run. Listing 4-1 shows the default routes. The first route instructs the routing engine to ignore requests for .axd\rresources such as ScriptResource.axd and WebResource.axd. These resources don’t physically exist as files in\rthe application; rather, they are HttpModules that load special content (such as images, scripts, CSS, etc.) that are\rembedded in DLL files so that they can be sent to the browser as part of the response. The second route is used to map\rrequests to controllers and action methods."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	43	6/2/2014 1:19:55 AM 	"Listing 4-1. Default Routes Created in the Internet Application Template in Visual Studio\rroutes.IgnoreRoute(""{resource}.axd/{*pathInfo}"");\rroutes.MapRoute(\rname: ""Default"",\rurl: ""{controller}/{action}/{id}"",\rdefaults: new { controller = ""Home"",\raction = ""Index"",\rid = UrlParameter.Optional }\r);"
Beginning ASP.NET MVC 4.pdf	brad	Highlight	43	6/2/2014 1:22:52 AM 	"To work correctly, routes need to be created when the application first starts. There is a handler called\rApplication_Start in the Global.asax.cs file for this purpose. In ASP.NET MVC 4, the Application_Start event\rhandler calls the static method RegisterRoutes() in the RouteConfig class located in the App_Start folder. The\rmethod accepts the existing routes table as a parameter so routes can be added to it."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	44	6/2/2014 1:23:30 AM 	"The route definition is done by the MapRoute extension method in the RouteCollection class. The route\rdefinition contains the route name as the first parameter, the route pattern as the second parameter, and the default\rvalues for the elements in the route pattern as the third parameter. The route pattern in the default route is composed\rof three placeholders. Each placeholders is defined using curly braces,{ }.\rThe routing system actually doesn’t know about controllers and their methods; it just matches the request to\ra pattern in a defined route (if one exists) and passes the information to the request pipeline, which in turn executes\rthe method in a controller.\rThe route pattern identifies the controller name with the controller placeholder property, the action placeholder\rproperty defines the action method in the controller class that will be executed, and an additional third parameter\rindicates some kind of information that will be used by the method. Note that the HTTP request doesn’t include the\rword “Controller” even though the controller class (per the naming convention) does use it. For example, with an HTTP\rrequest of http://myapp/Home/About, the route maps to the HomeController class and the action method About."
Beginning ASP.NET MVC 4.pdf	brad	Highlight	44	6/2/2014 1:24:11 AM 	"The action methods in the controller class can have parameters. These parameters are matched to values in the\rrequest. For example, a request such as http://myapp/Product/Details?id=1 is mapped to the ProductController\rclass to execute the Details action method, and the action method accepts a parameter named id that will be filled\rwith the value from the request."